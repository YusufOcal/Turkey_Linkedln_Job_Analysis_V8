#!/usr/bin/env python3
"""
ExpireAt Status Analyzer: expireAt s√ºtunundaki t√ºm d√ºzenlemelerin durumunu analiz et

Kontrol edilecekler:
1. expireAt data type (int64 ‚Üí datetime64)
2. Urgency kategorileri
3. Temporal features (month, quarter, season, etc.)
4. Business intelligence columns
"""

import pandas as pd
from datetime import datetime

def analyze_expireAt_status():
    """expireAt transformations status analizi"""
    
    print("üìÖ EXPIREAT TRANSFORMATIONS STATUS ANALYZER")
    print("=" * 55)
    
    target_file = 'linkedin_jobs_dataset_optimized_step12.csv'
    
    try:
        print(f"üìÇ Loading dataset: {target_file}")
        df = pd.read_csv(target_file)
        print(f"‚úÖ Dataset loaded: {len(df):,} records, {len(df.columns)} columns")
        print()
    except Exception as e:
        print(f"‚ùå Error loading dataset: {e}")
        return
    
    # ExpireAt ve urgency ile ilgili s√ºtunlarƒ± bul
    all_cols = df.columns.tolist()
    expire_related = [col for col in all_cols if any(keyword in col.lower() 
                     for keyword in ['expire', 'urgency', 'urgent'])]
    
    print("üîç EXPIREAT & URGENCY RELATED COLUMNS")
    print("=" * 45)
    print(f"Found {len(expire_related)} expire/urgency related columns:")
    
    for i, col in enumerate(expire_related, 1):
        dtype = df[col].dtype
        non_null = df[col].count()
        total = len(df)
        null_pct = ((total - non_null) / total) * 100
        
        print(f"   {i:2}. {col}")
        print(f"       üìä Type: {dtype}")
        print(f"       üìà Non-null: {non_null:,}/{total:,} ({100-null_pct:.1f}%)")
        
        # Sample values
        if non_null > 0:
            samples = df[col].dropna().head(3).tolist()
            print(f"       üìã Samples: {samples}")
        print()
    
    # EXPIREAT CORE ANALYSIS
    if 'expireAt' in df.columns:
        print("üìÖ EXPIREAT CORE COLUMN ANALYSIS")
        print("=" * 40)
        
        expire_col = df['expireAt']
        
        print(f"üìä Basic Statistics:")
        print(f"   ‚Ä¢ Data Type: {expire_col.dtype}")
        print(f"   ‚Ä¢ Total Records: {len(expire_col):,}")
        print(f"   ‚Ä¢ Non-null: {expire_col.count():,}")
        print(f"   ‚Ä¢ Null: {expire_col.isnull().sum():,}")
        print(f"   ‚Ä¢ Min Value: {expire_col.min()}")
        print(f"   ‚Ä¢ Max Value: {expire_col.max()}")
        print(f"   ‚Ä¢ Unique Values: {expire_col.nunique():,}")
        print()
        
        # Check if it's datetime or timestamp
        print(f"üïê DATETIME CONVERSION STATUS:")
        if expire_col.dtype == 'int64':
            print(f"   ‚ùå STILL INTEGER - Not converted to datetime")
            print(f"   üîç Likely Unix timestamp format")
            
            # Try to understand timestamp format
            sample_values = expire_col.head(5)
            print(f"   üìã Sample timestamp values: {sample_values.tolist()}")
            
            # Check if milliseconds or seconds
            avg_value = expire_col.mean()
            if avg_value > 1e12:  # Likely milliseconds
                print(f"   üéØ Format: Unix timestamp (milliseconds)")
                print(f"   üîß Conversion needed: pd.to_datetime(df['expireAt'], unit='ms')")
            else:  # Likely seconds
                print(f"   üéØ Format: Unix timestamp (seconds)")
                print(f"   üîß Conversion needed: pd.to_datetime(df['expireAt'], unit='s')")
                
        elif 'datetime' in str(expire_col.dtype):
            print(f"   ‚úÖ PROPERLY CONVERTED - Already datetime format")
            print(f"   üìÖ Date range: {expire_col.min()} to {expire_col.max()}")
        else:
            print(f"   ‚ö†Ô∏è  UNEXPECTED FORMAT - Type: {expire_col.dtype}")
        print()
    
    # URGENCY ANALYSIS
    urgency_columns = [col for col in expire_related if 'urgency' in col.lower()]
    
    if urgency_columns:
        print("üö® URGENCY CATEGORIES ANALYSIS")
        print("=" * 35)
        
        for col in urgency_columns:
            print(f"üìä {col}:")
            value_counts = df[col].value_counts()
            total_records = len(df)
            
            for value, count in value_counts.head(10).items():
                percentage = (count / total_records) * 100
                print(f"   ‚Ä¢ {value}: {count:,} ({percentage:.1f}%)")
            
            if len(value_counts) > 10:
                remaining = len(value_counts) - 10
                print(f"   ‚Ä¢ ... and {remaining} more categories")
            print()
    
    # TEMPORAL FEATURES ANALYSIS
    temporal_cols = [col for col in expire_related if any(word in col.lower() 
                    for word in ['month', 'quarter', 'day', 'week', 'season'])]
    
    if temporal_cols:
        print("üìÜ TEMPORAL FEATURES ANALYSIS")
        print("=" * 35)
        
        for col in temporal_cols:
            print(f"üìä {col}:")
            unique_values = df[col].unique()
            print(f"   ‚Ä¢ Unique values: {len(unique_values)}")
            print(f"   ‚Ä¢ Values: {sorted(unique_values)}")
            print()
    
    # COMPLETENESS ASSESSMENT
    print("üéØ EXPIREAT TRANSFORMATIONS COMPLETENESS ASSESSMENT")
    print("=" * 55)
    
    expected_transformations = {
        'datetime_conversion': {
            'description': 'expireAt converted from Unix timestamp to datetime',
            'check': 'expireAt' in df.columns and 'datetime' in str(df['expireAt'].dtype),
            'status': 'expireAt' in df.columns and 'datetime' in str(df['expireAt'].dtype)
        },
        'urgency_categories': {
            'description': 'Urgency categories created (CRITICAL, HIGH, MEDIUM, etc.)',
            'check': len(urgency_columns) > 0,
            'status': len(urgency_columns) > 0
        },
        'temporal_features': {
            'description': 'Temporal features extracted (month, quarter, season, etc.)',
            'check': len(temporal_cols) > 0,
            'status': len(temporal_cols) > 0
        },
        'business_intelligence': {
            'description': 'Business-friendly urgency levels for analytics',
            'check': any('level' in col.lower() for col in urgency_columns),
            'status': any('level' in col.lower() for col in urgency_columns) if urgency_columns else False
        }
    }
    
    total_transformations = len(expected_transformations)
    completed_transformations = sum(1 for t in expected_transformations.values() if t['status'])
    completion_rate = (completed_transformations / total_transformations) * 100
    
    print(f"üìä TRANSFORMATION CHECKLIST:")
    for name, info in expected_transformations.items():
        status = "‚úÖ COMPLETED" if info['status'] else "‚ùå MISSING"
        print(f"   ‚Ä¢ {info['description']}")
        print(f"     Status: {status}")
        print()
    
    print(f"üéØ OVERALL COMPLETION SCORE:")
    print(f"   ‚Ä¢ Completed: {completed_transformations}/{total_transformations}")
    print(f"   ‚Ä¢ Completion Rate: {completion_rate:.1f}%")
    
    if completion_rate == 100.0:
        print(f"   üéâ PERFECT! All expireAt transformations completed.")
    elif completion_rate >= 75.0:
        print(f"   ‚ö†Ô∏è  GOOD progress, but some transformations missing.")
    else:
        print(f"   üö® POOR completion, major transformations needed.")
    
    # RECOMMENDATIONS
    print(f"\nüõ†Ô∏è  RECOMMENDATIONS:")
    print("-" * 20)
    
    missing_transformations = [name for name, info in expected_transformations.items() if not info['status']]
    
    if not missing_transformations:
        print(f"‚úÖ No action needed! All expireAt transformations are complete.")
    else:
        print(f"‚ùå The following transformations need to be completed:")
        for name in missing_transformations:
            info = expected_transformations[name]
            print(f"   ‚Ä¢ {info['description']}")
        
        print(f"\nüîß Next steps:")
        if 'datetime_conversion' in missing_transformations:
            print(f"   1. Run datetime conversion script")
        if 'urgency_categories' in missing_transformations:
            print(f"   2. Create urgency categorization")
        if 'temporal_features' in missing_transformations:
            print(f"   3. Extract temporal features")
    
    return {
        'completion_rate': completion_rate,
        'completed_transformations': completed_transformations,
        'total_transformations': total_transformations,
        'expire_related_columns': expire_related,
        'urgency_columns': urgency_columns,
        'temporal_columns': temporal_cols
    }

if __name__ == "__main__":
    results = analyze_expireAt_status() 